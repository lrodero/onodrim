{"name":"Onodrim","tagline":"Onodrim is a Java library that eases the configuration and collection of results of bunches of jobs (experiments, simulations...).","body":"Intro to Onodrim\r\n================\r\n\r\n(This is a brief introduction to Onodrim, more detailed info is available in [Onodrim wiki](https://github.com/lrodero/onodrim/wiki). Contact address is \r\n <onodrim.project@gmail.com>, if you use Onodrim please let me know! :) )\r\n\r\nOnodrim is a Java library that eases the configuration and collection of results of bunches of jobs (experiments, simulations...). Onodrim is handy when you need to run computations configured using several parameters, where each parameter can have different values, and where even the set of parameters can change. Also it organizes the results to ease their analysis.\r\n\r\n**The problem:** often, it is not possible to know beforehand which are the parameters that should be configurable, in fact, many times those are discovered as more executions are run and a deeper analysis of results is required. Adding new configurable parameters and/or assigning values to them will require changing (once and again) the code. A pausible solution is to define the parameters in a `.properties` file. For example:\r\n```properties\r\nParameter1=123\r\n```\r\n\r\nThis way, adding and configuring parameters is easy. However, to iterate through several values to compare the results it would be needed a different `.properties` value for each configuration of parameters values (for two paramers with 10 values each we would need 100 files), and adding new parameters would force us to re-create *all* `.properties` files again and to create new ones.\r\n\r\n**Onodrim to the rescue:** let's see how Onodrim works with an example. Let's assume we use two parameters with several values each. We will create the following `test.properties` file\r\n```properties\r\n# The ; is used to separate parameter values\r\nParameter1=123;456;789\r\nParameter2=0;1;2;3;4;5;6;7;8;9\r\n```\r\n\r\nIf we run the following code\r\n```java\r\nList<Configuration> confs = Onodrim.buildConfigurations(new File(\"test.properties\"));\r\nfor(Configuration conf: confs) {\r\n    int p1 = conf.getIntParameter(\"Parameter1\");\r\n    int p2 = conf.getIntParameter(\"Parameter2\");\r\n    // Your stuff here\r\n}\r\n```\r\n\r\nthen Onodrim will build 30 configurations (`org.onodrim.Configuration` extends `java.util.Properties`). Of course this is a very simple example. But imagine now that you decide to configure your tasks with one more parameter. You only will need to change the `test.properties` file to something like:\r\n```properties\r\nParameter1=123;456;789\r\nParameter2=0;1;2;3;4;5;6;7;8;9\r\nParameter3=11.1;12.2;13.3\r\n```\r\n\r\njust as before, Onodrim will generate all the configurations required (90 in this case), but your code will remain (almost) the same! You only need to retrieve the new parameter values\r\n```java\r\nList<Configuration> confs = Onodrim.buildConfigurations(new File(\"test.properties\"));\r\nfor(Configuration conf: confs) {\r\n    int p1 = conf.getIntParameter(\"Parameter1\");\r\n    int p2 = conf.getIntParameter(\"Parameter2\");\r\n    double p3 = conf.getDoubleParameter(\"Parameter3\");\r\n    // Your stuff here\r\n}\r\n```\r\n\r\n**Is that all?** No :) .\r\n- Onodrim implements several mechanisms (conditional parameter generation, parameters grouping...) that bring a lot of flexibility when defining your experiments configuration.\r\n- It also allows to organize the results in handy tables for easy analysis.\r\n- Besides, it helps to keep well organized copies of all jobs, their configurations and results. Even more, it can reuse results so it is not needed to run again jobs whose results were already obtained (e.g. in case the execution of some set was interrupter and/or some specific jobs failed). Onodrim takes care of this when you delegate it the execution of jobs (automatic execution), like in the following example:\r\n\r\n```java\r\nOnodrim.runJobs(new File(\"test.properties\"), new JobImpl());\r\n...\r\nclass JobImpl implements JobEntryPoint {\r\n    @Override\r\n    public void startJob() {\r\n        Job job = Onodrim.getCurrentThreadJob();\r\n        Configuration conf = job.getConfiguration();\r\n        int p1=0,p2=0;\r\n        try {\r\n            p1 = conf.getIntParameter(\"Parameter1\");\r\n            p2 = conf.getIntParameter(\"Parameter2\");\r\n        } catch (ConfigurationException exception) {\r\n            job.setErrorInExecution(\"Could not read conf: \" + exception.getMessage(), exception);\r\n            return;\r\n        }\r\n        // Your stuff here; results can be added as follows:\r\n        job.addResult(\"R1\", p1*p2);\r\n    }\r\n}\r\n```\r\n\r\nA more detailed description of how to use Onodrim is available in the [Onodrim wiki in github](https://github.com/lrodero/onodrim/wiki).\r\n\r\nRequirements, Download & Installation\r\n=====================================\r\nOnodrim requires Java v1.6 (at least). Also, [Ant](http://ant.apache.org/ (v1.6.0 at least) will be handy to compile the source code and generate its Javadoc documentation.\r\n\r\n**Cloning through git** A git repository of Onodrim is available in [github](https://github.com/lrodero/onodrim). You can clone to get Onodrim sources and then compile them by running the following commands:\r\n```bash\r\n$ git clone git://github.com/lrodero/onodrim.git\r\n$ cd onodrim\r\n$ ant\r\n```\r\n\r\nthis will compile the source in the `src` folder and store the compiled classes in `bin`, it will generate the Javadoc API documentation in `doc`, and it will create three `.jar` files with the class files, documentation and source.\r\n\r\n**In a .zip archive** You can also download a `.zip` file containing Onodrim sources. Just run the following commands:\r\n```bash\r\n$ get https://github.com/lrodero/onodrim/archive/master.zip\r\n$ unzip master.zip\r\n$ cd onodrim-master\r\n$ ant\r\n```\r\n\r\ncalling to `ant` will have the same effect as above: compiling sources, generating Javadocs and creating `.jar` files.\r\n\r\n**Installation** To use Onodrim it is only needed to add the `onodrim-<version>.jar` file to the `CLASSPATH`.\r\n\r\nLicense & Contact\r\n=================\r\nOnodrim is distributed under the [GPL v3 license](http://www.gnu.org/licenses/gpl.html).\r\n\r\nAlso, if you use Onodrim, I'd really appreaciate if you let me know! I'm very interested in knowing who (and how) is using Onodrim in order to improve it. Thus, feedback and comments are welcome :) . You can contact me at <onodrim.project@gmail.com>. If you find any bug or have any problem please report the issue [here](https://github.com/lrodero/onodrim/issues) (or, again, contact me by email). \r\n\r\nFAQ\r\n===\r\n**What does 'Onodrim' mean?** I am a fan of Tolkien works :) ! . Onodrim is _\"The name given by the Elves to the giant tree-like beings that Men called Ents.\"_ ([The Encyclopedia or Arda](http://www.glyphweb.com/arda/o/onodrim.html)). As you probably know, and Onodrim/Ent is a shepherd of trees. Similarly, Onodrim is a kind of 'shepherd' of your jobs, as it should help you to organize and herd them. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}